namespace codewars;

using static Convert;

public class ErrorCorrectionNo1HammingCodeSolution
{
    public static string Encode(string text) => text
        .SelectMany(c => Convert.ToString(c, 2).PadLeft(8, '0'))
        .Aggregate(string.Empty, (c, n) => $"{c}{new string(n, 3)}");

    public static string Decode(string bits) => bits
        .ToChunks(3)
        .Select(GetBit)
        .ToChunks(8)
        .Select(s => ToInt32(s, 2))
        .Select(ToChar)
        .Aggregate(string.Empty, (c, n) => $"{c}{n}");

    public static char GetBit(IEnumerable<char> @this) => @this.Count(c => c == '1') >= 2 ? '1' : '0';

}

public class ErrorCorrectionNo1HammingCodeTests
{
    [Theory]
    [InlineData("hey", "000111111000111000000000000111111000000111000111000111111111111000000111")]
    [InlineData("The Sensei told me that i can do this kata
    [InlineData("T3st", "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000")]
    [InlineData("T?st!%", "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111")]
    public void VerifyEncodeWith(string text, string expectedEncoding) => ErrorCorrectionNo1HammingCodeSolution.Encode(text).Should().Be(expectedEncoding);

    [Theory]
    [InlineData("100111111000111001000010000111111000000111001111000111110110111000010111", "hey")]
    [InlineDatahe Sensei told me that i can do this kata")]
    [InlineData("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000", "T3st")]
    [InlineData("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111", "T?st!%")]
    public void VerifyDecodeWith(string text, string expectedDecoding) => ErrorCorrectionNo1HammingCodeSolution.Decode(text).Should().Be(expectedDecoding);
}
