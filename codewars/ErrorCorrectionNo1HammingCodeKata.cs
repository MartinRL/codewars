namespace codewars
{
    using System;
    using System.Linq;
    using FluentAssertions;
    using Xunit;

    public class ErrorCorrectionNo1HammingCodeSolution
    {
        public static string Encode(string text) => text.Select(Convert.ToInt32).ToString();

        public static string ToBinary(int baseTen)
        {
            var result = string.Empty;
            
            while (baseTen > 1)
            {
                var remainder = baseTen % 2;
                result = Convert.ToString(remainder) + result;
                baseTen /= 2;
            }
            
            return Convert.ToString(baseTen) + result;
        }
    }

    public class ErrorCorrectionNo1HammingCodeTests
    {
        [Theory]
        [InlineData("hey", "000111111000111000000000000111111000000111000111000111111111111000000111")]
        [InlineData("The Sensei told me that i can do this kata
        [InlineData("T3st", "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000")]
        [InlineData("T?st!%", "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111")]
        public void VerifyEncodeWith(string text, string expectedEncoding) => ErrorCorrectionNo1HammingCodeSolution.Encode(text).Should().Be(expectedEncoding);

        [Theory]
        [InlineData(65, "1000001")]
        [InlineData(2, "10")]
        [InlineData(8, "1000")]
        public void VerifyToBinaryWith(int baseTen, string expectedBinary) => ErrorCorrectionNo1HammingCodeSolution.ToBinary(baseTen).Should().Be(expectedBinary);
    }
}
